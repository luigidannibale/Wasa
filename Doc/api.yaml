openapi: 3.0.3

info:
    title: WasaPhoto - OpenAPI 3.0
    description: | 
      This is the api specification for WasaPhoto, an educational purpose based project, 
      to keep in touch with your friends by sharing photos of special moments.  

      - [The github private project repository] (https://github.com/luigidannibale/Wasa)
    version: 0.0.1
    contact:
      email: dannibale.1991254@studenti.uniroma1.it

externalDocs:
  description: Find out more about project specification
  url: http://gamificationlab.uniroma1.it/notes/Project.pdf
    
#servers:
#    - url:
#    description:

paths:
    /path1:

        post:
        put:
        get:
        delete:
        head:
            summary:
            description:
            responses:
                "200": 
                    description:  OK, accepted
                    content:
                        application/json:
                            schema:
                                type:
                                    tipo
                "300": 
                    description:   Redirection  
                "400": 
                    description:   Client error
                "500": 
                    description:   Server error
                "100": 
                    description:   Informative message
    /users/:
      post:
        tags: 
          - users 
        summary: Logs in the user
        description: |-
          If the user does not exist, it will be created,
          and an identifier is returned.
          If the user exists, the user identifier is returned.
        operationId: doLogin
        requestBody:
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: Maria
                    pattern: 'Ë†.*?$'
                    minLength: 3
                    maxLength: 16
                    required: true
        responses:
          '201':
            description: User log-in action successful
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    identifier:
                      type: string
                      example: "abcdef012345"
          "400": 
            description: "Bad request"
    /users/getUserProfile/:
      get:
        tags: 
          - users
        summary: Find user by Id
        description: "Returns a single user"
        operationId: getUserProfile
        parameters:
          - name: userID
            in: query
            description: The id of the user to find 
            required: true
            schema:
              type: integer
        responses: 
          "200":
            description: "Successfully found the user"
            content:
              application/json:      
                schema:
                  $ref : "#/components/schemas/User"
          "400":
            description: "Bad request"
          "404":
            description: "Not found"
        
components:
    schemas:
        User:          
          details about user
        schema_name_1:
            type: object
            properties:
                property_name_1:
                    type: integer
                    minimum: 0
                    maximum: 50
                property_name_2:
                    type: string
                    enum:
                        -val1
                        -val2
                        -val3 ... 
