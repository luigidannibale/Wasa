openapi: 3.0.0

info:
  title: WasaPhoto - OpenAPI 3.0
  description: | 
    This is the api specification for WasaPhoto, an educational purpose based project, 
    to keep in touch with your friends by sharing photos of special moments.  
    - [The github private project repository](https://github.com/luigidannibale/Wasa)
    
    Functional design specifications: 
    
    Each user will be presented with a stream of photos (images) in reverse chronological order, with
    information about when each photo was uploaded (date and time) and how many likes and comments
    it has. The stream is composed by photos from “following” (other users that the user follows). Users
    can place (and later remove) a “like” to photos from other users. Also, users can add comments to any
    image (even those uploaded by themself). Only authors can remove their comments.

    Users can ban other users. If user Alice bans user Eve, Eve won’t be able to see any information about
    Alice. Alice can decide to remove the ban at any moment.
    
    Users will have their profiles. The personal profile page for the user shows: the user’s photos (in reverse
    chronological order), how many photos have been uploaded, and the user’s followers and following.
    Users can change their usernames, upload photos, remove photos, and follow/unfollow other users.
    Removal of an image will also remove likes and comments.
    
    A user can search other user profiles via username.
    
    A user can log in just by specifying the username. 

  version: 1.0.0
  contact:
    email: dannibale.1991254@studenti.uniroma1.it

tags:
  - name: User
    description: "Operations of users on his profile (e.g. creation, change username, etc.)"
  - name: User Interactions
    description: "Operations of users regarding other users (e.g. follow, ban, etc.)"
  - name: Photos
    description: "Operations of users on their photos (e.g. post a photo, delete, etc.)"
  - name: Photos Interactions
    description: "Operations of users on others users photos (e.g. post a photo, delete, etc.)"

security:
  - UserAuth: []

paths:        
    #doLogin        - LastMod :  2/12 
    #getUserProfile - LastMod : 11/12 
    /users:
      post:
        operationId: doLogin
        security: []
        tags: 
          - User
          
        summary: Logs in a user
        description: |-
          If the user does not exist, it will be created,
          and an identifier is returned.
          If the user exists, the user identifier is returned.        
        requestBody:
          description: Username of the user          
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User/properties/username"
                  
        responses:
          "200":
            description: User log-in action successful
            content:
              application/json:
                schema:
                    $ref: "#/components/schemas/Message"
          "201":
            description: New user log-in action successful
            content:
              application/json:
                schema:
                    $ref: "#/components/schemas/Message"
          "400": 
            $ref : "#/components/responses/BadRequest" 
          "500":
            $ref : "#/components/responses/InternalServerError"        
      get:
        operationId: getUserProfile
        tags: 
          - User
          
        summary: Returns the profile of the user.
        description: |
          The profile of the user is returned, so all the details about the user.
        parameters:
          - name: username
            in: query
            description: The username of the user to find 
            required: true
            schema:
              $ref : "#/components/schemas/User/properties/username"
        responses: 
          "200":
            description: Successful, returning the user
            content:
              application/json:      
                schema:
                  $ref : "#/components/schemas/Message"
          "400":
            $ref : "#/components/responses/BadRequest" 
          "401":
            $ref : "#/components/responses/Unauthorized" 
          "404":
            $ref : "#/components/responses/NotFound" 
          "500":
            $ref : "#/components/responses/InternalServerError"      
    
    #updateUser     - LastMod : 11/12 
    /users/{userID}/profile:
      parameters:
      - $ref : "#/components/parameters/userID"
      
      put:
        operationId: updateUser
        tags:
          - User
          
        summary: Updates the user with new data
        description: |
          Takes a user (by the id) and a new user profile and updates the user, with the new data.
        requestBody:
          description: The new data of the user
          content:
            application/json:
              schema:
                $ref : "#/components/schemas/User"  
        responses:
          "200":
            $ref : "#/components/responses/OK"
          "201":
            $ref : "#/components/responses/Created"
          "400":
            $ref : "#/components/responses/BadRequest"
          "401":
            $ref : "#/components/responses/Unauthorized"                    
          "403":
            $ref : "#/components/responses/Forbidden"
          "404":
            $ref : "#/components/responses/NotFound"
          "409":
            $ref : "#/components/responses/Conflict"
          "500":
            $ref : "#/components/responses/InternalServerError"
    
    #setMyUserName  - LastMod :  6/12
    /users/{userID}/profile/username:      
      parameters:
      - $ref : "#/components/parameters/userID"
      put:
        operationId: setMyUserName
        tags:
          - User
          
        summary: Changes the username        
        description: |
          Takes a user (by the id) and a name and sets the name as the new username of such user.           
        requestBody:
          description: The username to set
          content:
            application/json:
              schema:
                $ref : "#/components/schemas/User/properties/username"          
        responses:
          "200":
            $ref : "#/components/responses/OK"
          "201":
            $ref : "#/components/responses/Created"
          "400":
            $ref : "#/components/responses/BadRequest"
          "401":
            $ref : "#/components/responses/Unauthorized"                    
          "403":
            $ref : "#/components/responses/Forbidden"
          "404":
            $ref : "#/components/responses/NotFound"
          "409":
            $ref : "#/components/responses/Conflict"
          "500":
            $ref : "#/components/responses/InternalServerError"   
        
    #getMyStream  - LastMod : 30/11 
    /users/{userID}/profile/stream:
      parameters:
        - $ref : "#/components/parameters/userID"
      get:
        operationId: getMyStream
        tags:
          - User
          
        summary: Gets the user his stream 
        description: |
          Takes an user id and returns his stream (stream of photos of users 
          followed by actual user) as array of photos.
        responses:
          "200":
            description: Successful, returning the stream
            content:
              application/json:
                schema:
                  $ref : "#/components/schemas/Stream"
          "400":
            $ref : "#/components/responses/BadRequest" 
          "401":
            $ref : "#/components/responses/Unauthorized"
          "404":
            $ref : "#/components/responses/NotFound"
          "500":
            $ref : "#/components/responses/InternalServerError"
    
    #getMyPhotos  - LastMod : 31/12
    /users/{userID}/profile/photos:
      parameters:
        - $ref : "#/components/parameters/userID"
      get:
        operationId: getMyPhotos
        tags:
          - User          
        summary: Gets the user his own photos
        description: |
          Takes an user id and returns his photos as array of photos.
        responses:
          "200":
            description: Successful, returning the photos
            content:
              application/json:
                schema:
                  $ref : "#/components/schemas/Stream"
          "400":
            $ref : "#/components/responses/BadRequest" 
          "401":
            $ref : "#/components/responses/Unauthorized"
          "404":
            $ref : "#/components/responses/NotFound"
          "500":
            $ref : "#/components/responses/InternalServerError"
    
    #getFollowedList  - LastMod : 11/12 
    #followUser       - LastMod : 11/12 
    /users/{userID}/followed:
      parameters:
      - $ref : "#/components/parameters/userID"
      
      put:
        operationId: followUser
        tags:
          - User Interactions
          
        summary: Follows a user
        description: |
          The actual user (userID) starts following the given user (userToFollowID).
          If was already followed nothing happens.
        parameters:          
          - name: userToFollowID
            in: query
            description: Id of the user to follow
            required: true
            schema:
              $ref : "#/components/schemas/User/properties/id"
        
        responses:
          "200": 
            $ref : "#/components/responses/OK"
          "201":
            $ref : "#/components/responses/Created"
          "400":
            $ref : "#/components/responses/BadRequest" 
          "401":
            $ref : "#/components/responses/Unauthorized" 
          "403":
            $ref : "#/components/responses/Forbidden"                
          "404":
            $ref : "#/components/responses/NotFound"            
          "500":
            $ref : "#/components/responses/InternalServerError"
      get:
        operationId: getFollowedList
        tags:
          - User Interactions
          
        summary: Gets the list of all the followed from the user
        description: Gets the list of all the followed from the user
        responses:
          "200":
            description: Successful, returning the list of followed
            content:
              application/json:
                schema:
                  $ref : "#/components/schemas/ListOfUsers"
          "400":
            $ref : "#/components/responses/BadRequest" 
          "401":
            $ref : "#/components/responses/Unauthorized"
          "404":
            $ref : "#/components/responses/NotFound" 
          "500":
            $ref : "#/components/responses/InternalServerError"
    
    #getFollowersList - LastMod : 30/12
    /users/{userID}/followers:
      parameters:
      - $ref : "#/components/parameters/userID"
      get:
        operationId: getFollowersList
        tags:
          - User Interactions
          
        summary: Gets the list of all the follower of the user
        description: Gets the list of all the follower of the user
        responses:
          "200":
            description: Successful, returning the list of followers
            content:
              application/json:
                schema:
                  $ref : "#/components/schemas/ListOfUsers"
          "400":
            $ref : "#/components/responses/BadRequest" 
          "401":
            $ref : "#/components/responses/Unauthorized"
          "404":
            $ref : "#/components/responses/NotFound" 
          "500":
            $ref : "#/components/responses/InternalServerError"
    
    #unfollowUser     - LastMod : 11/12
    /users/{userID}/followed/{followedID}:
      parameters:
      - $ref : "#/components/parameters/userID"
      - $ref : "#/components/parameters/followedID"
      
      delete:
        operationId: unfollowUser
        tags:
          - User Interactions
          
        summary: Unfollows a user
        description: |
          The actual user (userID) unfollows the given user (followedID).          
        responses:
          "200": 
            $ref : "#/components/responses/OK"
          "400":
            $ref : "#/components/responses/BadRequest"
          "401":
            $ref : "#/components/responses/Unauthorized"
          "403":
            $ref : "#/components/responses/Forbidden"
          "404":
            $ref : "#/components/responses/NotFound"
          "500": 
            $ref : "#/components/responses/InternalServerError"
    
    #getBannedList    - LastMod : 11/12 
    #banUser          - LastMod : 11/12 
    /users/{userID}/banned:
      parameters:
      - $ref : "#/components/parameters/userID"
      
      put:
        operationId: banUser
        tags:          
          - User Interactions
          
        summary: Bans a user
        description: |
          The actual user (user ID) bans the given user (userToBanID).
          If was already banned nothing happens.          
        parameters:          
          - name: userToBanID
            in: query
            description: Id of the user to ban
            required: true
            schema:
              $ref : "#/components/schemas/User/properties/id"
        responses:
          "200": 
            $ref : "#/components/responses/OK"
          "201":
            $ref : "#/components/responses/Created"
          "400":
            $ref : "#/components/responses/BadRequest" 
          "401":
            $ref : "#/components/responses/Unauthorized" 
          "403":
            $ref : "#/components/responses/Forbidden"                
          "404":
            $ref : "#/components/responses/NotFound"            
          "500":
            $ref : "#/components/responses/InternalServerError"
      get:
        operationId: getBannedList
        tags:
          - User Interactions
          
        summary: Gets the list of all the banned from the users
        description: Gets the list of all the banned from the users
        responses:
          "200":
            description: Successful, returning the list of banned
            content:
              application/json:
                schema:
                  $ref : "#/components/schemas/ListOfUsers"                  
          "400":
            $ref : "#/components/responses/BadRequest" 
          "401":
            $ref : "#/components/responses/Unauthorized"
          "404":
            $ref : "#/components/responses/NotFound" 
          "500":
            $ref : "#/components/responses/InternalServerError"
          
    #unbanUser        - LastMod : 11/12 
    /users/{userID}/banned/{bannedID}:
      parameters:
      - $ref : "#/components/parameters/userID"
      - $ref : "#/components/parameters/bannedID"

      delete:
        operationId: unbanUser
        tags:
          - User Interactions
          
        summary: Unbans a user
        description: |
          The actual user (user ID) unbans the given user (banned ID).           
        responses:
          "200": 
            $ref : "#/components/responses/OK"
          "400":
            $ref : "#/components/responses/BadRequest"
          "401":
            $ref : "#/components/responses/Unauthorized"
          "403":
            $ref : "#/components/responses/Forbidden"
          "404":
            $ref : "#/components/responses/NotFound"
          "500": 
            $ref : "#/components/responses/InternalServerError"
    
    #uploadPhoto       - LastMod : 11/12 - Status : Working BanSafe
    /photos:
      post:
        operationId: uploadPhoto
        tags:
          - Photos
          
        summary: Post a new photo
        description: |
          Takes a photo and a user, the user posts the photo.          
          If the user id does not match a user error 404 is threw.
        parameters:
          - name: caption
            in: query            
            description: the caption of the photo
            required: true
            schema:
              $ref: "#/components/schemas/Photo/properties/caption"
        requestBody:
          description: the image
          content:          
            image/*:
              schema:
                $ref: "#/components/schemas/Photo/properties/image"
        responses:
          "201":
            description: Successful, photo posted, returning photo id
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Message"
          "400":
            $ref : "#/components/responses/BadRequest"
          "401":
            $ref : "#/components/responses/Unauthorized" 
          "404":
            $ref : "#/components/responses/NotFound" 
          "500":
            $ref : "#/components/responses/InternalServerError" 
    
    #getPhoto     - LastMod : 11/12 - Status : Working BanSafe
    #deletePhoto  - LastMod : 11/12 - Status : Working BanSafe
    /photos/{photoID}:
      parameters:
        - $ref : "#/components/parameters/photoID"
      get:
        operationId: getPhoto
        tags:
          - Photos Interactions
          
        description: 
          Gets a photo by the id.
        summary: Gets a photo
        responses:
          "200":
            description: Successful, returning the photo
            content: 
              application/json:
                schema:
                  $ref : "#/components/schemas/Photo"            
          "400":
            $ref : "#/components/responses/BadRequest" 
          "401":
            $ref : "#/components/responses/Unauthorized"
          "404":
           $ref : "#/components/responses/NotFound" 
          "500":
            $ref : "#/components/responses/InternalServerError" 
      delete:
        operationId: deletePhoto
        tags:
          - Photos 
          
        description: |
          Deletes a photo by the id.          
        summary: Deletes a photo
        responses:
          "200":
            $ref : "#/components/responses/OK" 
          "400":
            $ref : "#/components/responses/BadRequest" 
          "401":
            $ref : "#/components/responses/Unauthorized" 
          "403":
           $ref : "#/components/responses/Forbidden"
          "404":
           $ref : "#/components/responses/NotFound" 
          "500":
            $ref : "#/components/responses/InternalServerError"     
    
    #likePhoto   - LastMod : 11/12 - Status : Working BanSafe
    #getLike     - LastMod : 11/12 - Status : Working BanSafe
    #unlikePhoto - LastMod : 11/12 - Status : Working BanSafe
    /photos/{photoID}/likes:
      parameters:
        - $ref : "#/components/parameters/photoID"
      put:
        operationId: likePhoto
        tags: 
          - Photos Interactions
          
        summary: Puts a like to a photo
        description: |
          Takes a userID and creates a like of that user to the photo, 
          if such user has already liked the photo, nothing happens.        
        responses:
          "200":
            $ref : "#/components/responses/OK" 
          "201":
            $ref : "#/components/responses/Created" 
          "400":
            $ref : "#/components/responses/BadRequest"
          "401":
            $ref : "#/components/responses/Unauthorized"
          "404":
            $ref : "#/components/responses/NotFound"            
          "500":
            $ref : "#/components/responses/InternalServerError"
      get:
        operationId: getLike
        tags:
          - Photos Interactions
          
        description: 
          Gets a like
        summary: Gets a like
        responses:
          "200":
            description: Successful, returning the like
            content: 
              application/json:
                schema:
                  $ref : "#/components/schemas/Message"
          "400":
            $ref : "#/components/responses/BadRequest" 
          "401":
            $ref : "#/components/responses/Unauthorized"
          "404":
           $ref : "#/components/responses/NotFound" 
          "500":
            $ref : "#/components/responses/InternalServerError" 
      delete:
        operationId: unlikePhoto
        tags:
          - Photos Interactions
          
        summary: Deletes a like to the photo
        description: |
          Takes a userID, if it matches the user that has put the like, the like is deleted,
          otherwise nothing happens.
        responses:
          "200":
            $ref : "#/components/responses/OK" 
          "400":
            $ref : "#/components/responses/BadRequest" 
          "401":
            $ref : "#/components/responses/Unauthorized" 
          "403":
            $ref : "#/components/responses/Forbidden" 
          "404":
            $ref : "#/components/responses/NotFound" 
          "500":
            $ref : "#/components/responses/InternalServerError" 
    
    #getLikersList - LastMod : 11/12 - Status : Working BanSafe
    /photos/{photoID}/likes/list:
      parameters:
        - $ref : "#/components/parameters/photoID"
      get:
        operationId: getLikersList
        tags:
          - Photos Interactions
          
        summary: Gets the list of all the id of users that liked to the photo
        description: Gets the list of all the id of users that liked to the photo
        responses:
          "200":
            description: Successful, returning the list of likers
            content:
              application/json:
                schema:
                  type: array
                  description: The list of likers
                  minItems: 0
                  maxItems: 100
                  items: 
                    $ref : "#/components/schemas/User/properties/id"
          "400":
            $ref : "#/components/responses/BadRequest" 
          "401":
            $ref : "#/components/responses/Unauthorized"
          "404":
            $ref : "#/components/responses/NotFound" 
          "500":
            $ref : "#/components/responses/InternalServerError"
    
    #commentPhoto    - LastMod : 11/12 - Status : Working BanSafe
    #getCommentsList - LastMod : 10/12 - Status : Working BanSafe
    /photos/{photoID}/comments:
      parameters:
        - $ref : "#/components/parameters/photoID"
      post:
        operationId: commentPhoto
        tags: 
          - Photos Interactions
          
        summary: Comments a photo
        description: |
          Takes a userID and the text message of the comment and creates 
          a new comment of that user to the photo.
        parameters:
          - name: content
            in: query
            description: the caption of the comment
            schema:
              $ref : "#/components/schemas/Comment/properties/content"
        responses:
          "201":
            description: Successful, commment created, returning id
            content:              
              application/json:
                schema:
                  $ref : "#/components/schemas/Message"
          "400":
            $ref : "#/components/responses/BadRequest" 
          "401":
            $ref : "#/components/responses/Unauthorized"
          "404":
            $ref : "#/components/responses/NotFound" 
          "500":
            $ref : "#/components/responses/InternalServerError"
      get:
        operationId: getCommentsList
        tags:
          - Photos Interactions
          
        summary: Gets the list of all the comments to the photo
        description: Gets the list of all the comments to the photo        
        responses:
          "200":
            description: Successful, returning the list of comments
            content:
              application/json:
                schema:
                  type: array
                  description: The list of comments
                  minItems: 0
                  maxItems: 100
                  items: 
                    $ref : "#/components/schemas/Comment"
          "400":
            $ref : "#/components/responses/BadRequest" 
          "401":
            $ref : "#/components/responses/Unauthorized"
          "404":
            $ref : "#/components/responses/NotFound" 
          "500":
            $ref : "#/components/responses/InternalServerError"
          
    #getComment     - LastMod : 10/12 - Status : Working BanSafe
    #uncommentPhoto - LastMod : 10/12 - Status : Working BanSafe
    /photos/{photoID}/comments/{commentID}:
      parameters: 
        - $ref : "#/components/parameters/photoID"
        - $ref : "#/components/parameters/commentID"
      
      get:
        operationId: getComment
        tags: 
          - Photos Interactions
          
        summary: Gets the comment details
        description: Takes a comment id and returns the comment
        responses:
          "200":
            description:  Success, returning the comment
            content:
              application/json:
                schema:
                   $ref : "#/components/schemas/Message"
          "400":
            $ref : "#/components/responses/BadRequest" 
          "401":
            $ref : "#/components/responses/Unauthorized"
          "404":
            $ref : "#/components/responses/NotFound" 
          "500":
            $ref : "#/components/responses/InternalServerError"        
      delete:
        operationId: uncommentPhoto
        tags:
          - Photos Interactions
          
        summary: Deletes a comment to the photo
        description: |
          Deletes a comment to the photo, using both photoID and commentID.
        responses:
          "200":
            description: Success, comment deleted
            content:
              application/json:
                schema:
                   $ref : "#/components/schemas/Message"
          "400":
            $ref : "#/components/responses/BadRequest"
          "401":
            $ref : "#/components/responses/Unauthorized"
          "403":
            $ref : "#/components/responses/Forbidden"
          "404":
            $ref : "#/components/responses/NotFound" 
          "500":
            $ref : "#/components/responses/InternalServerError"
    
components:  

  securitySchemes: # LastMod - 2/12
    UserAuth: 
      type: http
      scheme: bearer
  
  parameters: # LastMod - 28/11
    userID: 
      name: userID
      in: path
      description: Id of the user
      required: true
      schema:
        $ref : "#/components/schemas/User/properties/id"
    followedID: 
      name: followedID
      in: path
      description: Id of the followed user
      required: true
      schema:
        $ref : "#/components/schemas/User/properties/id"
    bannedID: 
      name: bannedID
      in: path
      description: Id of the banned user
      required: true
      schema:
        $ref : "#/components/schemas/User/properties/id"
    photoID: 
      name: photoID
      in: path
      description: ID of the photo
      required: true
      schema:
        $ref : "#/components/schemas/Photo/properties/id"    
    commentID: 
      name: commentID
      in: path
      description: ID of the comment
      required: true
      schema:
        $ref : "#/components/schemas/Comment/properties/id"    
  
  schemas:  #LastMod - 11/12
    User:          
      type: object
      description: a user composed of id, username, name, surname, date of birth
      properties:
        id:
          description: identifier of the user
          type: integer
          example: 42
          readOnly: true
        username:
          description: username of the user
          type: string
          example: Maria
          pattern: "^[a-zA-Z0-9._]{3,16}$"
          minLength: 3
          maxLength: 16
        name:
          description: name of the user 
          type: string
          example: Marianna
          pattern: "^[a-zA-Z]{3,25}$"
          minLength: 3
          maxLength: 25
        surname:
          description: surname of the user 
          type: string
          example: Rossi
          pattern: "^[a-zA-Z']{3,25}$"
          minLength: 3
          maxLength: 25
        dateOfBirth:        
          $ref : "#/components/schemas/Date"
    Date :  
      type : string
      description: a date composed of year,month,day
      minLength: 10
      maxLength: 10      
      pattern: "[0-9]{4}-[0-9]{2}-[0-9]{2}"
      example: "2003-01-10"      
    Timestamp: 
      type: string
      description: a timestamp composed of date, hour, minutes, seconds
      pattern: "[0-9]{2} [0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}[A|P]M '[0-9]{2} .[0-9]{4}"
      example: "12 11 03:08:38PM '23 +0100"
    Photo: 
      type: object 
      description: a photo composed of id, image, caption, upload timestamp
      properties:
        id:
          description: id of the photo
          type: integer
          example: 12
          readOnly: true
        image:          
          description: image of the photo
          type: string
          format: binary          
          minLength: 0
          maxLength: 40960          
        caption:
          description: caption of the photo
          type: string  
          example: Look what a beautiful photo
          pattern: ".{1,100}$"
          minLength: 1
          maxLength: 100
        uploadTimestamp:
          $ref: "#/components/schemas/Timestamp"
    Stream:       
      type: array
      description: a stream of photos
      minItems: 0      
      maxItems: 200
      items: 
        $ref : "#/components/schemas/Photo"    
    Comment: 
      type: object
      description: a comment composed of id, userID, content
      properties:
        id:
          description: the id of the comment
          type: integer
          example: 42
          readOnly: true        
        userID:          
          $ref : "#/components/schemas/User/properties/id"
        content:
          description: the content of the comment
          type: string
          example: "Nice photo"
          pattern: ".{1,1024}$"
          minLength: 1
          maxLength: 1024    
    Message:       
      description: a simple text message
      type: string
      example: "This is the outcome"
      pattern: ".{0,1024}"
      minLength: 0
      maxLength: 1024
    ListOfUsers:       
      type: array
      description: a list of users
      minItems: 0
      maxItems: 100
      items: 
        $ref : "#/components/schemas/User"
  
  responses: # LastMod - 2/12
    OK: 
      description: The request has been completed successfully
      content: 
        application/json:
          schema:
            $ref : "#/components/schemas/Message"
    Created: 
      description: The request has been completed successfully, resulting in a creation
      content: 
        application/json:
          schema:
            $ref : "#/components/schemas/Message"
    BadRequest: 
      description: The request is bad asked
      content: 
        application/json:
          schema:
            $ref : "#/components/schemas/Message"
    Unauthorized: 
      description: This request is unauthorized
      content: 
        application/json:
          schema:
            $ref : "#/components/schemas/Message"    
    Forbidden: 
      description: Resource(s) not found
      content: 
        application/json:
          schema:
            $ref : "#/components/schemas/Message"
    NotFound: 
      description: Resource(s) not found
      content: 
        application/json:
          schema:
            $ref : "#/components/schemas/Message"    
    Conflict: 
      description: The request creates a conflict
      content: 
        application/json:
          schema:
            $ref : "#/components/schemas/Message"
    InternalServerError: 
      description: Internal server error has occurred
      content: 
        application/json:
          schema:
            $ref : "#/components/schemas/Message"

  
