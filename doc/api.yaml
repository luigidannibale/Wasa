openapi: 3.0.3


info:
    title: WasaPhoto - OpenAPI 3.0
    description: | 
      This is the api specification for WasaPhoto, an educational purpose based project, 
      to keep in touch with your friends by sharing photos of special moments.  

      - [The github private project repository] (https://github.com/luigidannibale/Wasa)
    version: "1"
    contact:
      email: dannibale.1991254@studenti.uniroma1.it

externalDocs:
  description: Find out more about project specification
  url: http://gamificationlab.uniroma1.it/notes/Project.pdf
    
paths:
    #doLogin
    /users/:
      post:
        operationId: doLogin
        tags: 
          - user
        summary: Logs in a user
        description: |-
          If the user does not exist, it will be created,
          and an identifier is returned.
          If the user exists, the user identifier is returned.        
        requestBody:
          description: User details
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
                  
        responses:
          "200":
            description: User log-in action successful
            content:
              application/json:
                schema:
                    $ref: "#/components/schemas/User/properties/id"
          "201":
            description: New user log-in action successful
            content:
              application/json:
                schema:
                    $ref: "#/components/schemas/User/properties/id"
          "400": 
            description: Bad request
    
    #getUserProfile
    /users/getUserProfile/:
      get:
        operationId: getUserProfile
        tags: 
          - user
        summary: Returns the profile of the user
        description: |
          The user profile of the user is returned.         
          If the user id is not valid, error 400 is threw.
          If the user id is valid but doesn't exist error  404 is threw.
        parameters:
          - name: userID
            in: query
            description: The id of the user to find 
            required: true
            schema:
              $ref : "#/components/schemas/User/properties/id"
        responses: 
          "200":
            description: Successful, returning the found the user
            content:
              application/json:      
                schema:
                  $ref : "#/components/schemas/UserProfile"
                    
          "400":
            description: Bad request, enter a valid user ID
          "404":
            description: User not found
    
    #setMyUserName
    /users/{userID}/:
      parameters:
      - $ref : "#/components/parameters/userID"
      put:
        operationId: setMyUserName
        tags:
          - user
        summary: Changes the username
        description: |
          Takes a user (by the id) and a name and sets the name as the new username of such user. 
          If the username was already set with such name nothing happens.
          If the username isn't valid error 400 is threw.
          If the username is valid but user id doesn't exist error 404 is threw.
        parameters:
          - name: username 
            in: query
            description: Name to set to the user
            required: true
            schema:
              $ref : "#/components/schemas/User/properties/username"
        responses:
          "200":
            description: Successful, username was already set like so
          "201":
            description: Successful, username set
          "400":
            description: Bad request, returning the not valid parameter(s)
            content: 
              application/json:
                schema:
                  anyOf:
                    - $ref : "#/components/parameters/userID"
                    - $ref : "#/components/schemas/User/properties/username"
          "404":
            description: User not found
      
    #getMyStream    
    /users/{userID}/getMyStream:
      parameters:
        - $ref : "#/components/parameters/userID"
      get:
        operationId: getMyStream
        tags:
          - user
        summary: Gets the user his stream 
        description: |
          Takes an user id and returns his stream (stream of photos of users 
          followed by actual user) as array of photos. 
          If the id does not exist error 404 is threw.
        responses:
          "200":
            description: Successful, returning the stream
            content:
              application/json:
                schema:
                  $ref : "#/components/schemas/UserProfile/properties/stream"
          "400":
            description: Bad request, userID not valid
          "404":
            description: User not found
          
    #followUser
    /users/{userID}/followed/:
      parameters:
      - $ref : "#/components/parameters/userID"
      
      put:
        operationId: followUser
        tags:
          - user
        summary: Follows a user
        description: |
          The actual user (user ID) starts following the given user (followed ID).
          If was already followed nothing happens.
          If one of the IDs isn't a valid id error 400 is threw.
          If one of the IDs don't exist error 404 is threw.
        requestBody:
          content:
            application/json:
              schema:
                $ref : "#/components/schemas/User"
        responses:
          "200": 
            description: Successful, already followed
          "201":
            description: Successful, followed
          "400":
            description: Bad request
            content: 
              text/plain:
                schema:
                  type: string
                
          "404":
            description: Not found, returning the parameter(s)
            content: 
              application/json:
                schema:
                  anyOf:
                    - $ref : "#/components/parameters/userID"
                    - $ref : "#/components/schemas/User"
    
    #unfollowUser
    /users/{userID}/followed/{followedID}/:
      parameters:
      - $ref : "#/components/parameters/userID"
      - $ref : "#/components/parameters/followedID"
      
      delete:
        operationId: unfollowUser
        tags:
          - user
        summary: Unfollows a user
        description: |
          The actual user (user ID) unfollows the given user (followed ID).
          If was already not followed nothing happens.
          If one of the IDs isn't a valid id error 400 is threw.
          If one of the IDs don't exist error 404 is threw.
        responses:
          "200": 
            description: Successful, already not followed
          "201":
            description: Successful, unfollowed
          "400":
            description: Bad request, returning the not valid parameter(s)
            content: 
              application/json:
                schema:
                  anyOf:
                    - $ref : "#/components/parameters/userID"
                    - $ref : "#/components/parameters/followedID"
          "404":
            description: Not found, returning the parameter(s) 
            content: 
              application/json:
                schema:
                  anyOf:
                    - $ref : "#/components/parameters/userID"
                    - $ref : "#/components/parameters/followedID"

    #banUser
    /users/{userID}/banned/:
      parameters:
      - $ref : "#/components/parameters/userID"
      
      put:
        operationId: banUser
        tags:
          - user 
        summary: Bans a user
        description: |
          The actual user (user ID) bans the given user (banned ID).
          If was already banned nothing happens.
          If one of the IDs isn't a valid id error 400 is threw.
          If one of the IDs don't exist error 404 is threw.
        requestBody:
          content:
            application/json:
              schema:
                $ref : "#/components/schemas/User"
        responses:
          "200": 
            description: Successful, already banned
          "201":
            description: Successful, banned
          "400":
            description: Bad request, returning the not valid parameter(s)
            content: 
              application/json:
                schema:
                  anyOf:
                    - $ref : "#/components/parameters/userID"
                    - $ref : "#/components/schemas/User"
          "404":
            description: Not found, returning the parameter(s)
            content: 
              application/json:
                schema:
                  anyOf:
                    - $ref : "#/components/parameters/userID"
                    - $ref : "#/components/schemas/User"
    
    #unbanUser
    /users/{userID}/banned/{bannedID}/:
      parameters:
      - $ref : "#/components/parameters/userID"
      - $ref : "#/components/parameters/bannedID"

     
      delete:
        operationId: unbanUser
        tags:
          - user
        summary: Unbans a user
        description: |
          The actual user (user ID) unbans the given user (unbanned ID). 
          If was already not banned nothing happens.
          If one of the IDs isn't a valid id error 400 is threw.
          If one of the IDs don't exist error 404 is threw.
        responses:
          "200": 
            description: Successful, already not banned
          "201":
            description: Successful, unbanned
          "400":
            description: Bad request, returning the not valid parameter(s)
            content: 
              application/json:
                schema:
                  anyOf:
                    - $ref : "#/components/parameters/userID"
                    - $ref : "#/components/parameters/bannedID"
          "404":
            description: Not found, returning the parameter(s) 
            content: 
              application/json:
                schema:
                  anyOf:
                    - $ref : "#/components/parameters/userID"
                    - $ref : "#/components/parameters/bannedID"
     
    #uploadPhoto
    /photos/:
      post:
        operationId: uploadPhoto
        tags:
          - photos
        summary: Post a new photo
        description: |
          Takes a photo and a user, the user posts the photo.
          If the user id or the photo are not valid error 400 is threw.
          If the user id does not match a user error 404 is threw.
        parameters:
          - name: userID
            in: query
            description: The user id of the user that posts the photo
            required: true
            schema:
              $ref: '#/components/schemas/User/properties/id'
        requestBody:
          content:
            multipart/form-data :
              schema:
                type: string
                format: binary
        responses:
          "200":
            description: Successful, photo posted, returning photo id
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Photo/properties/id'
          "400":
            
            description: Bad request, returning the not valid parameter(s)
            content: 
              application/json:
                schema:
                  anyOf:
                    - $ref : "#/components/parameters/userID"
                    - $ref : "#/components/schemas/Photo"
          "404":
            description : Not found, the user id doesn't match a user
      
    #deletePhoto
    /photos/{photoID}:
      parameters:
        - $ref : "#/components/parameters/photoID"
        
      delete:
        operationId: deletePhoto
        tags:
          - photos
        description: |
          Deletes a photo by the id.
          If the id isn't valid, error 400 is threw.
          If the id doesn't match a photo, error 404 is threw.
        summary: Deletes a photo
        responses:
          "200":
            description: Successful, photo deleted
          "400":
            description: Bad request, enter a valid photo ID
          "404":
            description: Not found, photo doesn't exist
    
    #likePhoto
    /photos/{photoID}/likes/:
      parameters:
        - $ref : "#/components/parameters/photoID"
      put:
        operationId: likePhoto
        tags: 
          - photos
        summary: Puts a like to a photo
        description: |
          Takes a userID and creates a like of that user to the photo, 
          if such user has already liked the photo, nothing happens.
        parameters:
          - name: userID
            in: query
            schema:
              $ref : "#/components/schemas/User/properties/id"
        responses:
          "200":
            description: Successful, already liked, returning like id
            content:
              application/json:
                schema:
                  $ref : "#/components/schemas/Like/properties/id"
          "201":
            description: Successfully liked the photo, returning like id
            content:
              application/json:
                schema:
                  $ref : "#/components/schemas/Like/properties/id"
          "400":
            description: Bad request, returning the not valid parameter(s)
            content: 
              application/json:
                schema:
                  anyOf:
                    - $ref : "#/components/schemas/User/properties/id"
                    - $ref : "#/components/parameters/photoID"
          "404":
            description: Not found, returning the parameter(s)
            content: 
              application/json:
                schema:
                  anyOf:
                    - $ref : "#/components/schemas/User/properties/id"
                    - $ref : "#/components/parameters/photoID"
    
    #getLike
    #unlikePhoto
    /photos/{photoID}/likes/{likeID}/:
      parameters: 
        - $ref : "#/components/parameters/photoID"
        - $ref : "#/components/parameters/likeID"
      
      get:
        operationId: getLike
        tags: 
          - photos 
        summary: Gets the like details
        description: Takes a like id and returns the like 
        responses:
          "200":
            description:  Success, returning the like
            content:
              application/json:
                schema:
                   $ref : "#/components/schemas/Like"
        
      delete:
        operationId: unlikePhoto
        tags:
          - photos
        summary: Deletes a like to the photo
        description: |
          Takes a userID, if it matches the user that has put the like, the like is deleted,
          otherwise nothing happens.
        parameters:
          - name: userID
            in: query
            schema:
              $ref : "#/components/schemas/User/properties/id"
        responses:
          "200":
            description: Success, photo unliked
          "400":
            description: Bad request, returning the not valid parameter(s)
            content: 
              application/json:
                schema:
                  anyOf:
                    - $ref : "#/components/parameters/photoID"
                    - $ref : "#/components/parameters/likeID"
          "404":
            description: Not found, returning the parameter(s)
            content: 
              application/json:
                schema:
                  anyOf:
                    - $ref : "#/components/schemas/Photo/properties/id"
                    - $ref : "#/components/parameters/likeID"
    
    #commentPhoto
    /photos/{photoID}/comments/:
      parameters:
        - $ref : "#/components/parameters/photoID"
      post:
        operationId: commentPhoto
        tags: 
          - photos
        summary: Comments a photo
        description: |
          Takes a userID and the text message of the comment and creates 
          a new comment of that user to the photo.
        parameters:
          - name: userID
            in: query
            schema:
              $ref : "#/components/schemas/User/properties/id"
          - name: content
            in: query
            schema:
              $ref : "#/components/schemas/Comment/properties/content"
        responses:
          "201":
            description: Successful, commment created, returning id
            content:
              application/json:
                schema:
                  $ref : "#/components/schemas/Comment/properties/id"
          "400":
            description: Bad request, returning the not valid parameter(s)
            content: 
              application/json:
                schema:
                  anyOf:
                    - $ref : "#/components/parameters/photoID"
                    - $ref : "#/components/parameters/likeID"
          "404":
            description: Not found, returning the parameter(s)
            content: 
              application/json:
                schema:
                  anyOf:
                    - $ref : "#/components/parameters/photoID"
                    - $ref : "#/components/parameters/likeID"
    
    #getComment
    #uncommentPhoto
    /photos/{photoID}/comments/{commentID}/:
      parameters: 
        - $ref : "#/components/parameters/photoID"
        - $ref : "#/components/parameters/commentID"
      
      get:
        operationId: getComment
        tags: 
          - photos 
        summary: Gets the comment details
        description: Takes a comment id and returns the comment
        responses:
          "200":
            description:  Success, returning the comment
            content:
              application/json:
                schema:
                   $ref : "#/components/schemas/Comment"
        
      delete:
        operationId: uncommentPhoto
        tags:
          - photos
        summary: Deletes a comment to the photo
        description: |
          Takes a userID, if it matches the user that has posted the comment, the comment is deleted,
          otherwise nothing happens.
        parameters:
          - name: userID
            in: query
            schema:
              $ref : "#/components/schemas/User/properties/id"
        responses:
          "200":
            description: Success, comment deleted
          "400":
            description: Bad request, returning the not valid parameter(s)
            content: 
              application/json:
                schema:
                  anyOf:
                    - $ref : "#/components/parameters/photoID"
                    - $ref : "#/components/parameters/commentID"
          "404":
            description: Not found, returning the parameter(s)
            content: 
              application/json:
                schema:
                  anyOf:
                    - $ref : "#/components/parameters/photoID"
                    - $ref : "#/components/parameters/commentID"
    

components:  
  parameters:
    userID: 
      name: userID
      in: path
      description: Id of the user
      required: true
      schema:
        $ref : "#/components/schemas/User/properties/id"
    followedID: 
      name: followedID
      in: path
      description: Id of the followed user
      required: true
      schema:
        $ref : "#/components/schemas/User/properties/id"
    bannedID: 
      name: bannedID
      in: path
      description: Id of the banned user
      required: true
      schema:
        $ref : "#/components/schemas/User/properties/id"
    photoID:
      name: photoID
      in: path
      description: ID of the photo
      required: true
      schema:
        $ref : "#/components/schemas/Photo/properties/id"
    likeID:
      name: likeID
      in: path
      description: ID of the like
      required: true
      schema:
        $ref : "#/components/schemas/Like/properties/id"
    commentID:
      name: commentID
      in: path
      description: ID of the comment
      required: true
      schema:
        $ref : "#/components/schemas/Comment/properties/id"
  
  schemas:
    User:          
      type: object
      properties:
        id:
          type: string
          example: ab1wd
          readOnly: true
        username:
          type: string
          example: Maria
          pattern: ˆ .*? $
          minLength: 3
          maxLength: 16
    UserProfile:
      type: object
      properties:
        user:
          $ref : "#/components/schemas/User"
        followed:
          type: array
          items: 
            $ref : "#/components/schemas/User"
        following:
          type: array
          items: 
            $ref : "#/components/schemas/User"
        stream:
          type: array
          items: 
            $ref : "#/components/schemas/Photo"
    Photo: 
      type: object 
      properties:
        id:
          type: string
          example: wvd12
          readOnly: true
        image:
          description: The actual image of the photo
          type: string
          format: binary
        upload-timestamp:
          $ref: "#/components/schemas/Date"
    Like:
      type: object
      properties:
        id:
          type: string
          example: as32
          readOnly: true
        userID:
          $ref : "#/components/schemas/User/properties/id"
    Comment:
      type: object
      properties:
        id:
          type: string
          example: as32
          readOnly: true
        userID:
          $ref : "#/components/schemas/User/properties/id"
        content:
          type: string
    Date:
      properties: 
        year:
          type: integer            
        month:
          type: string
          enum:
            - January
            - February
            - March
            - April
            - May
            - June
            - July
            - August
            - September
            - October
            - November
            - December
        day:
          type: integer
          minimum: 1
          maximum: 31
        hour:
          type: integer
          minimum: 0
          maximum: 23
        minutes:
          type: integer
          minimum: 0
          maximum: 59
        seconds:
          type: integer
          minimum: 0
          maximum: 59

    