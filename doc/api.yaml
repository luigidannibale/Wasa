openapi: 3.0.0

info:
  title: WasaPhoto - OpenAPI 3.0
  description: | 
    This is the api specification for WasaPhoto, an educational purpose based project, 
    to keep in touch with your friends by sharing photos of special moments.  
    - [The github private project repository](https://github.com/luigidannibale/Wasa)
    
  version: 1.0.0
  contact:
    email: dannibale.1991254@studenti.uniroma1.it

externalDocs:
  description: Find out more about project specification
  url: http://gamificationlab.uniroma1.it/notes/Project.pdf

tags:
  - name: User
    description: Operations of users on his profile (e.g. creation, change username, etc.)
  - name: User Interactions
    description: Operations of users regarding other users (e.g. follow, ban, etc.)
  - name: Photos
    description: Operations of users on their photos (e.g. post a photo, delete, etc.)
  - name: Photos Interactions
    description: Operations of users on others users photos (e.g. post a photo, delete, etc.)
  - name: Working
    description: (debug tag) Methods implemented and operative 
  - name: Not Working
    description: (debug tag) Methods to be implemented or not fully operative

security:
  - UserAuth: []

paths:    
    
    #doLogin - LastMod : 2/12 - Status : Working
    #getUserProfile - LastMod : 4/12 - Status : Working
    /users/:
      post:
        operationId: doLogin
        security: []
        tags: 
          - User
          - Working
        summary: Logs in a user
        description: |-
          If the user does not exist, it will be created,
          and an identifier is returned.
          If the user exists, the user identifier is returned.        
        requestBody:
          description: Usename of the user
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User/properties/username"
                  
        responses:
          "200":
            description: User log-in action successful
            content:
              application/json:
                schema:
                    $ref: "#/components/schemas/Message"
          "201":
            description: New user log-in action successful
            content:
              application/json:
                schema:
                    $ref: "#/components/schemas/Message"
          "400": 
            $ref : "#/components/responses/BadRequest" 
          "500":
            $ref : "#/components/responses/InternalServerError"        
                   
      get:
        operationId: getUserProfile
        tags: 
          - User
          - Working
        summary: Returns the profile of the user.
        description: |
          The profile of the user is returned, so all the details about the user.
        parameters:
          - name: username
            in: query
            description: The username of the user to find 
            required: true
            schema:
              $ref : "#/components/schemas/User/properties/username"
        responses: 
          "200":
            description: Successful, returning the user
            content:
              application/json:      
                schema:
                  $ref : "#/components/schemas/User"                    
          "400":
            $ref : "#/components/responses/BadRequest" 
          "401":
            $ref : "#/components/responses/Unauthorized" 
          "404":
            $ref : "#/components/responses/NotFound" 
          "500":
            $ref : "#/components/responses/InternalServerError" 
    
    #setMyUserName - LastMod : 4/12 - Status : Working
    #updateUser - put - to implement
    /users/{userID}/:
      parameters:
      - $ref : "#/components/parameters/userID"
      put:
        operationId: setMyUserName
        tags:
          - User
          - Working
        summary: Changes the username        
        description: |
          Takes a user (by the id) and a name and sets the name as the new username of such user. 
          If the username was already set with such name nothing happens.          
          If the user can't be found error 404 is threw.
        parameters:
          - name: username 
            in: query
            description: Name to set to the user
            required: true
            schema:
              $ref : "#/components/schemas/User/properties/username"
        responses:
          "200":
            $ref : "#/components/responses/OK"
          "201":
            $ref : "#/components/responses/Created"
          "400":
            $ref : "#/components/responses/BadRequest"
          "401":
            $ref : "#/components/responses/Unauthorized"                    
          "403":
            $ref : "#/components/responses/Forbidden"
          "404":
            $ref : "#/components/responses/NotFound"
          "409":
            $ref : "#/components/responses/Conflict"
          "500":
            $ref : "#/components/responses/InternalServerError"
          
    #getMyStream - LastMod : 30/11 - Status : Not Working
    /users/{userID}/getMyStream:
      parameters:
        - $ref : "#/components/parameters/userID"
      get:
        operationId: getMyStream
        tags:
          - User
          - Not Working
        summary: Gets the user his stream 
        description: |
          Takes an user id and returns his stream (stream of photos of users 
          followed by actual user) as array of photos.
        responses:
          "200":
            description: Successful, returning the stream
            content:
              application/json:
                schema:
                  $ref : "#/components/schemas/Stream"
          "400":
            $ref : "#/components/responses/BadRequest" 
          "404":
            $ref : "#/components/responses/NotFound"
          "500":
            $ref : "#/components/responses/InternalServerError"
          
    #followUser - LastMod : 4/12 - Status : Working
    /users/{userID}/followed/:
      parameters:
      - $ref : "#/components/parameters/userID"
      
      put:
        operationId: followUser
        tags:
          - User Interactions
          - Working
        summary: Follows a user
        description: |
          The actual user (userID) starts following the given user (userToFollowID).
          If was already followed nothing happens.
        parameters:          
          - name: userToFollowID
            in: query
            description: Id of the user to follow
            required: true
            schema:
              $ref : "#/components/schemas/User/properties/id"
        
        responses:
          "200": 
            $ref : "#/components/responses/OK"
          "201":
            $ref : "#/components/responses/Created"
          "400":
            $ref : "#/components/responses/BadRequest" 
          "401":
            $ref : "#/components/responses/Unauthorized" 
          "403":
            $ref : "#/components/responses/Forbidden"                
          "404":
            $ref : "#/components/responses/NotFound"            
          "500":
            $ref : "#/components/responses/InternalServerError"
    
    #unfollowUser - LastMod : 4/12 - Status : Working
    /users/{userID}/followed/{followedID}/:
      parameters:
      - $ref : "#/components/parameters/userID"
      - $ref : "#/components/parameters/followedID"
      
      delete:
        operationId: unfollowUser
        tags:
          - User Interactions
          - Working
        summary: Unfollows a user
        description: |
          The actual user (userID) unfollows the given user (followedID).          
        responses:
          "200": 
            $ref : "#/components/responses/OK"
          "400":
            $ref : "#/components/responses/BadRequest"
          "401":
            $ref : "#/components/responses/Unauthorized"
          "403":
            $ref : "#/components/responses/Forbidden"
          "404":
            $ref : "#/components/responses/NotFound"
          "500": 
            $ref : "#/components/responses/InternalServerError"
    
    #banUser - LastMod : 4/12 - Status : Not Working
    /users/{userID}/banned/:
      parameters:
      - $ref : "#/components/parameters/userID"
      
      put:
        operationId: banUser
        tags:
          - User Interactions
          - Working
        summary: Bans a user
        description: |
          The actual user (user ID) bans the given user (userToBanID).
          If was already banned nothing happens.          
        parameters:          
          - name: userToBanID
            in: query
            description: Id of the user to ban
            required: true
            schema:
              $ref : "#/components/schemas/User/properties/id"
        responses:
          "200": 
            $ref : "#/components/responses/OK"
          "201":
            $ref : "#/components/responses/Created"
          "400":
            $ref : "#/components/responses/BadRequest" 
          "401":
            $ref : "#/components/responses/Unauthorized" 
          "403":
            $ref : "#/components/responses/Forbidden"                
          "404":
            $ref : "#/components/responses/NotFound"            
          "500":
            $ref : "#/components/responses/InternalServerError"
    
    #unbanUser - LastMod : 4/12 - - Status : Not Working
    /users/{userID}/banned/{bannedID}/:
      parameters:
      - $ref : "#/components/parameters/userID"
      - $ref : "#/components/parameters/bannedID"

      delete:
        operationId: unbanUser
        tags:
          - User Interactions
          - Working
        summary: Unbans a user
        description: |
          The actual user (user ID) unbans the given user (unbanned ID).           
        responses:
          "200": 
            $ref : "#/components/responses/OK"
          "400":
            $ref : "#/components/responses/BadRequest"
          "401":
            $ref : "#/components/responses/Unauthorized"
          "403":
            $ref : "#/components/responses/Forbidden"
          "404":
            $ref : "#/components/responses/NotFound"
          "500": 
            $ref : "#/components/responses/InternalServerError"
    
    #uploadPhoto - LastMod : 30/11 - Status : Not Working
    /photos/:
      post:
        operationId: uploadPhoto
        tags:
          - Photos
          - Not Working
        summary: Post a new photo
        description: |
          Takes a photo and a user, the user posts the photo.          
          If the user id does not match a user error 404 is threw.
        parameters:
          - name: caption
            in: query
            required: false
            description: the caption of the photo
            schema:
              $ref: "#/components/schemas/Photo/properties/caption"
        requestBody:
          content:          
            image/*:
              schema:
                type: string
                format: binary
        responses:
          "201":
            description: Successful, photo posted, returning photo id
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Message"
          "400":
            $ref : "#/components/responses/BadRequest"
          "401":
            $ref : "#/components/responses/Unauthorized" 
          "404":
            $ref : "#/components/responses/NotFound" 
          "406":
            $ref : "#/components/responses/NotAcceptable" 
          "500":
            $ref : "#/components/responses/InternalServerError" 
    
    #deletePhoto - LastMod : 30/11 - Status : Not Working
    /photos/{photoID}:
      parameters:
        - $ref : "#/components/parameters/photoID"
        
      delete:
        operationId: deletePhoto
        tags:
          - Photos
          - Not Working
        description: |
          Deletes a photo by the id.          
        summary: Deletes a photo
        responses:
          "200":
            $ref : "#/components/responses/OK" 
          "400":
            $ref : "#/components/responses/BadRequest" 
          "404":
           $ref : "#/components/responses/NotFound" 
          "500":
            $ref : "#/components/responses/InternalServerError" 
    
    #likePhoto - LastMod : 30/11 - Status : Not Working
    /photos/{photoID}/likes/:
      parameters:
        - $ref : "#/components/parameters/photoID"
      put:
        operationId: likePhoto
        tags: 
          - Photos Interactions
          - Not Working
        summary: Puts a like to a photo
        description: |
          Takes a userID and creates a like of that user to the photo, 
          if such user has already liked the photo, nothing happens.        
        responses:
          "200":
            $ref : "#/components/responses/OK" 
          "201":
            $ref : "#/components/responses/Created" 
          "400":
            $ref : "#/components/responses/BadRequest"
          "401":
            $ref : "#/components/responses/Unauthorized"
          "404":
            $ref : "#/components/responses/NotFound"            
          "500":
            $ref : "#/components/responses/InternalServerError"
    
    #unlikePhoto - LastMod : 30/11 - Status : Not Working
    /photos/{photoID}/likes/{likeID}/:
      parameters: 
        - $ref : "#/components/parameters/photoID"
        - $ref : "#/components/parameters/likeID"
      delete:
        operationId: unlikePhoto
        tags:
          - Photos Interactions
          - Not Working
        summary: Deletes a like to the photo
        description: |
          Takes a userID, if it matches the user that has put the like, the like is deleted,
          otherwise nothing happens.
        responses:
          "200":
            $ref : "#/components/responses/OK" 
          "400":
            $ref : "#/components/responses/BadRequest" 
          "404":
            $ref : "#/components/responses/NotFound" 
          "500":
            $ref : "#/components/responses/InternalServerError" 
    
    #commentPhoto - LastMod : 30/11 - Status : Not Working
    /photos/{photoID}/comments/:
      parameters:
        - $ref : "#/components/parameters/photoID"
      post:
        operationId: commentPhoto
        tags: 
          - Photos Interactions
          - Not Working
        summary: Comments a photo
        description: |
          Takes a userID and the text message of the comment and creates 
          a new comment of that user to the photo.
        parameters:
          - name: userID
            in: query
            schema:
              $ref : "#/components/schemas/User/properties/id"
          - name: content
            in: query
            schema:
              $ref : "#/components/schemas/Comment/properties/content"
        responses:
          "201":
            description: Successful, commment created, returning id
            content:
              application/json:
                schema:
                  $ref : "#/components/schemas/Comment/properties/id"
          "400":
            $ref : "#/components/responses/BadRequest" 
          "404":
            $ref : "#/components/responses/NotFound" 
          "500":
            $ref : "#/components/responses/InternalServerError"
    
    #getComment - LastMod : 30/11 - Status : Not Working
    #uncommentPhoto - LastMod : 30/11 - Status : Not Working
    /photos/{photoID}/comments/{commentID}/:
      parameters: 
        - $ref : "#/components/parameters/photoID"
        - $ref : "#/components/parameters/commentID"
      
      get:
        operationId: getComment
        tags: 
          - Photos Interactions
          - Not Working
        summary: Gets the comment details
        description: Takes a comment id and returns the comment
        responses:
          "200":
            description:  Success, returning the comment
            content:
              application/json:
                schema:
                   $ref : "#/components/schemas/Comment"
          "400":
            $ref : "#/components/responses/BadRequest" 
          "404":
            $ref : "#/components/responses/NotFound" 
          "500":
            $ref : "#/components/responses/InternalServerError"
        
      delete:
        operationId: uncommentPhoto
        tags:
          - Photos Interactions
          - Not Working
        summary: Deletes a comment to the photo
        description: |
          Deletes a comment to the photo, by the IDs of both.
        responses:
          "200":
            description: Success, comment deleted
          "400":
            $ref : "#/components/responses/BadRequest" 
          "404":
            $ref : "#/components/responses/NotFound" 
          "500":
            $ref : "#/components/responses/InternalServerError"
    
components:  
  securitySchemes: # LastMod - 2/12
    UserAuth: #can be referenced using $ref : "#/components/SecuritySchemes/UserAuth"
      type: http
      scheme: bearer
  
  parameters: # LastMod - 28/11
    userID: #can be referenced using $ref : "#/components/parameters/userID"
      name: userID
      in: path
      description: Id of the user
      required: true
      schema:
        $ref : "#/components/schemas/User/properties/id"
    followedID: #can be referenced using $ref : "#/components/parameters/followedID"
      name: followedID
      in: path
      description: Id of the followed user
      required: true
      schema:
        $ref : "#/components/schemas/User/properties/id"
    bannedID: #can be referenced using $ref : "#/components/parameters/bannedID"
      name: bannedID
      in: path
      description: Id of the banned user
      required: true
      schema:
        $ref : "#/components/schemas/User/properties/id"
    photoID: #can be referenced using $ref : "#/components/parameters/photoID"
      name: photoID
      in: path
      description: ID of the photo
      required: true
      schema:
        $ref : "#/components/schemas/Photo/properties/id"    
    commentID: #can be referenced using $ref : "#/components/parameters/commentID"
      name: commentID
      in: path
      description: ID of the comment
      required: true
      schema:
        $ref : "#/components/schemas/Comment/properties/id"
    likeID: #can be referenced using $ref : "#/components/parameters/likeID"
      name: likeID
      in: path
      description: ID of the like
      required: true
      schema:
        $ref : "#/components/schemas/Like/properties/id"
  
  schemas:  #LastMod - 1/12
    User: #can be referenced using $ref : "#/components/schemas/User"         
      type: object
      description: a user composed of id, username, name, surname, date of birth
      properties:
        id:
          description: identifier of the user
          type: integer
          example: 42
          readOnly: true
        username:
          description: username of the user
          type: string
          example: Maria
          pattern: "^[a-zA-Z0-9._]{3,16}$"
          minLength: 3
          maxLength: 16
        name:
          description: name of the user 
          type: string
          example: Marianna
          pattern: "^[a-zA-Z]{3,25}$"
          minLength: 3
          maxLength: 25
        surname:
          description: surname of the user 
          type: string
          example: Rossi
          pattern: "^[a-zA-Z']{3,25}$"
          minLength: 3
          maxLength: 25
        dateOfBirth:        
          $ref : "#/components/schemas/Date"
    Date :  #can be referenced using $ref : "#/components/schemas/Date"
      type : object
      description: a date composed of day,month,year
      properties:
        year:
          description: year of the date
          type: integer            
          minimum:  1900
        month:
          description: month of the date
          type: string
          enum:
            - January
            - February
            - March
            - April
            - May
            - June
            - July
            - August
            - September
            - October
            - November
            - December
        day:
          description: day of the date
          type: integer
          minimum: 1
          maximum: 31
    Timestamp: #can be referenced using $ref : "#/components/schemas/Timestamp"
      type: object
      description: a timestamp composed of date, hour, minutes, seconds
      properties: 
        date:
          $ref : "#/components/schemas/Date"
        hour:
          description: hour of the timestamp
          type: integer
          minimum: 0
          maximum: 23
        minutes:
          description: minutes of the timestamp
          type: integer
          minimum: 0
          maximum: 59
        seconds:
          description: seconds of the timestamp
          type: integer
          minimum: 0
          maximum: 59    
    Photo: #can be referenced using $ref : "#/components/schemas/Photo"
      type: object 
      description: a photo composed of id, image, caption, upload timestamp
      properties:
        id:
          description: id of the photo
          type: integer
          example: 12
          readOnly: true
        image:          
          description: image of the photo
          type: string
          format: binary          
          minLength: 0
          maxLength: 40960
        caption:
          description: caption of the photo
          type: string  
          example: Look what a beautiful photo
          pattern: ".*{0,100}$"
          minLength: 0
          maxLength: 100
        uploadTimestamp:
          $ref: "#/components/schemas/Timestamp"
    Stream: #can be referenced using $ref : "#/components/schemas/Stream"      
      type: array
      description: a stream of photos
      items: 
        $ref : "#/components/schemas/Photo"
    UserProfile: #can be referenced using $ref : "#/components/schemas/UserProfile"
      type: object
      description: a user profile composed of a user, followed list, following list, stream
      properties:
        user:
          $ref : "#/components/schemas/User"
        followed:          
          type: array
          description: list of users followed by the user
          items: 
            $ref : "#/components/schemas/User"
        following:
          type: array
          description: list of users that follow the user
          items: 
            $ref : "#/components/schemas/User"
        stream:
          $ref : "#/components/schemas/Stream"    
    Like: #can be referenced using $ref : "#/components/schemas/Like"
      type: object
      description: a like composed by id
      properties:        
        id:
          $ref : "#/components/schemas/User/properties/id"
    Comment: #can be referenced using $ref : "#/components/schemas/Comment"
      type: object
      description: a comment composed of id, userID, content
      properties:
        id:
          description: the id of the comment
          type: integer
          example: 42
          readOnly: true        
        userID:          
          $ref : "#/components/schemas/User/properties/id"
        content:
          description: the content of the comment
          type: string
          example: "Nice photo"
          pattern: ".*{0,1024}$"
          minLength: 0
          maxLength: 1024    
    Message: #can be referenced using $ref : "#/components/schemas/Message"      
      description: a simple text message
      type: string
      example: "Error"
      pattern: ".*"
      minLength: 0
      maxLength: 1024
      
  responses: # LastMod - 2/12
    OK: #can be referenced using $ref : "#/components/responses/OK"
      description: The request has been completed successfully
      content: 
        application/json:
          schema:
            $ref : "#/components/schemas/Message"
    Created: #can be referenced using $ref : "#/components/responses/Created"
      description: The request has been completed successfully, resulting in a creation
      content: 
        application/json:
          schema:
            $ref : "#/components/schemas/Message"
    BadRequest: #can be referenced using $ref : "#/components/responses/BadRequest"
      description: The request is bad asked
      content: 
        application/json:
          schema:
            $ref : "#/components/schemas/Message"
    Unauthorized: #can be referenced using $ref : "#/components/responses/Unauthorized"
      description: This request is unauthorized
      content: 
        application/json:
          schema:
            $ref : "#/components/schemas/Message"    
    Forbidden: #can be referenced using $ref : "#/components/responses/Forbidden"
      description: Resource(s) not found
      content: 
        application/json:
          schema:
            $ref : "#/components/schemas/Message"
    NotFound: #can be referenced using $ref : "#/components/responses/NotFound"
      description: Resource(s) not found
      content: 
        application/json:
          schema:
            $ref : "#/components/schemas/Message"
    NotAcceptable: #can be referenced using $ref : "#/components/responses/NotAcceptable"
      description: Resource(s) not acceptable
      content: 
        application/json:
          schema:
            $ref : "#/components/schemas/Message"
    Conflict: #can be referenced using $ref : "#/components/responses/Conflict"
      description: The request creates a conflict
      content: 
        application/json:
          schema:
            $ref : "#/components/schemas/Message"
    InternalServerError: #can be referenced using $ref : "#/components/responses/InteralServerError"
      description: Internal server error has occurred
      content: 
        application/json:
          schema:
            $ref : "#/components/schemas/Message"